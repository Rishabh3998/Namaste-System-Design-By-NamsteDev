- What is Pagination ?

When we have the large amount of data and we need to show it on a website. Like suppose we have millions
of entires then we cannot show them directly on the webpage in one go, we need a mechanism to show them
on the webpage in a proper manner so that user would not get overwhelmed. 

So, we broke down the data into multiple clusters and show them with same count of entries on each defined
page one by one. 

- Why do we need Pagination ?

To make our app clutter free and easy to use.

- What type of Pagination is used in which kind of application ?

We need to make sure if the current app on which we are working even need a pagination, we cannot just
implement pagination if the app does not require any.

- Why we are choosing this particular type/technique of Pagination ?

It totally depends upon the product requirement, when we need a limited set of data and need the next 
set of data after some user action, we call this mechanism pagination. So, a simple list of buttons 
with page number can helps with pagination and even the infinite scroll can help us with pagination.

Infinite scroll is an effective alternative solution tha n simple pagination.


- Difference between Pagination and Infinite scroll.

                    Pagination                      |                  Infinite scroll
                                                    |
1. Structure and Hierarchy in data.                 |  1. Data is not structured properly.
2. Data is finite (we know how much entries we      |  2. Data is infinite, Totally depends upon the data 
   will see on a random page).                      |     present inside the database.
3. Back and Forth movement/navigation is possible.  |  3. No back and forth the previous data will be there.
4. We get the footer.                               |  4. No footer.
                                                    |  5. It is addictive, mobile friendly and Real time.
                                                    |  6. Bad for SEO, searching is an issue

- Explain different kind of pagination.

Frontend: Client side pagination
- Fetch all the data at once, and then populate some fixed number of entries on each page.
- The API called will be done only once, and the data can be stored on the client side.

                    Pros                            |                  Cons
                                                    |
1. Since we fetched all the data at once, therefore | 1. Initial load time will be high.
   the page change will be faster and UX will be    | 2. It is browser heavy.
   much more good (Faster page navigation).         | 3. The page can be very slow initially.
2. Less API calls (at max one)                      | 
3. Easy to implement.                               |     
4. Data can be easily transformed using map, filter,|
   reduce.                                          |  
                                                    |  

Backend: Server side pagination
- Fetch the data one by one when the user will click on the page, and render that instantly.
- We can also use an optimization here: Cache the data when the data is loaded, so that if the same page is 
  visited again then no new API call would be there.

                    Pros                            |                  Cons
                                                    |
1. Works efficiently on large data.                 | 1. Large number of API calls would be there.
2. Initial load time is very low.                   | 2. For each change on the page there would be API call.
   much more good (Faster page navigation).         |    Examples: Sorting of data, searching for data etc.
                                                    | 3. Backend dependency would be there.

- How can we implement this ? What type of strategies we can use ?

For server side:
- Offset pagination technique (Why offset? Page is called as offset and pageSize is called as limit)
   - API call: /products?page=1&pageSize=10

- Cursor pagination technique
   - Why cursor pagination ?
      - So, there a small problem with offset pagination and cursor pagination solves that problem.
      - Let's discuss about the problem in offset pagination first.

      Example:

      a  |  t                      d                           e
      b  |  u                      e                           m  
      c  |  a                      f                           n
      d  |  b                      g                           o  

      page 1                     page 2                      page 3

      offset: 0 (skip)           offset: 4                   offset: 8
      limit: 4                   limit: 4                    limit: 4 (No. of records)

      suppose 2 new              c,d will shift              f,g will shift here.
      users entered on           here.
      page 1. The first
      2 will move down 
      and the new ones
      will enter on the 
      above in the list.

      Now, when the user is going from page 2 to page 3 and in the time between 2 new users added
      on the page 1, all the data will be shifted, and when he will visit there he will see the 
      last 2 entries of page 2 on page 3 will make the user confuse. This is the problem in 
      offset pagination technique. So, when the data is real time we don't use offset pagination,
      instead of this we use cursor pagination. Offset works well with static data.

      To solve this issue facebook suggested a solution which named as cursor pagination.
      - When to use ?
         - When the data is real-time (dynamic).
         - No skipped entries, no missing entries also.
         - Faster then offset pagination.
      
      - While making an API call when we are using this pagination, we do not set offset,
        we send something called cursor (It is basically kind of like a unique property for an 
        element.) and along with this we also send the count (How much data we want).

      - How the data fetching will work ?
         -  When we send the cursor and limit in the api, the backend will find the cursor in the
            database and then send the next limit - 1 entries with the cursor. 
            Example: cursor = 7 and limit = 4
            output: 7,8,9,10 (These entries we will get inside the response)

      - Pros:
         -  No data is missed or skipped while serving the data in the response.
         -  No duplicacy is there.
         -  Faster then offset pagination.
            -  Offset pagination is like linked list therefore searching takes time in DB.
            -  Cursor pagination is like finding an element in array using given index which takes 
               O(1).
            -  Works will with Real time data.

      - Cons:
         -  It very well suits with infinite scroll, so we can only use this with infinite scroll.
         -  Sorting is not feasible.
         -  It is a little tricky to implement in Backend and Frontend as well.

      
         