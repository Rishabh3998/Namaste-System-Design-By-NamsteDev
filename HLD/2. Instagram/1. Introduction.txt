# Requirements gathering:

- Let's start by gathering the requirements for creating this instagram app.

Functional requirements:

- Feed management:
    - List || View
    - Create || delete || update (Only title of the post) a post.
    - Comments and Likes

- Reels:
    - List || View
    - Create Reels

- Stories:
    - List || View
    - Create stories

- Browse:
    - People
    - Trending topics 

- Chatting:
- Account management:

- Profile management:
    - Profile page 
    - Profile settings
    - Followers

Non-Functional requirements:

- Security:
    - Private Profile

- Responsiveness:
    - Mobile, Tablet, Desktop

- Authentication:
    - Public routes
    - Private routes

- SEO:
- Optimizations:
    - Virtualization of Feed
    - Lazy loading (Load only those feeds which are in the viewport).

- Accessibility:
- Offline support:


Scoping of the above requirements:

Only include basic requirements for now, so that the app will be functional with the minimum effort.

# Architecture Design:

Architecture design will revolve around, where should we execute operations ? Because we can either use
Client side or we can use server side. We need to bifurcate which things will get execute on client and
which one will get's execute on server.

Client side:

1. Storage
    - React context / Redux / Zustand (State management)
    - Apollo cache (Network caching and state management)
    - LocalStorage
    - IndexedDB

The decision of what kind of Storage we need to use will also depends upon what type of API architecture we
are going to use on the server side, example: REST, GraphQL.

- We will use view-controller architecture

2. View (UI) Layer
    - List || Read Feed view
    - Create / Upload / Delete Feed || Post 

3. Controller (Business logic) Layer
    - Provide Filters to the image that's going to be posted.
    - Image editing (Cropping etc.....)
    - Upload Image / Post / Story / Reels.

4. Services Layer
    - This layer will contains all our service files, all API calling logic will place here.

Server Side:

1. API gateway:
    - Our service layer will hit this gateway to do the manipulations with the data present on server. 
    - This gateway will bifurcate the request to the concerned service, example: Auth related services 
      will go to the auth service etc...

2. Service Layer:
3. Cache Layer:
4. DB 

# Component Architecture:

1. Feed
    - Feed List || View Feed
        - Like & Reaction
        - Comments
        - Caption
        - User details header
        - Post container (To show post / image that was uploaded)
    
    - Feed Create || Post Create 
        - Form
            - Image Upload
            - Enter Caption
            - Location
            - Tags
            - Filters

# Data Model:

1. Post:
    - id
    - caption
    - createdAt
    - modifiedAt
    - userId
    - mediaId[]
    - comments[]
    - likes

2. Feed:
    - postId[]
    - totalPosts

3. User:
    - id
    - name
    - profileImageUrl

4. Media:     
    - id
    - type (image or video)
    - url 

# API structure:

1. Feed List
    - Request
        - /feedList?page=1&pageSize=20 => GET request
    - Response
        - {
            count: 10 => total number of results/feeds can be shown on a page (For pagination)
            next: null
            previous: null
            results: [
                {
                    id: 1,
                    name: "post 1",
                    ....
                },
                {
                    id: 2,
                    name: "post 2",
                    ....
                }
            ]
        }

2. Create Post/Feed
    - Request
        - /createPost (With upload)
        - /upload
        - /createPost (Without upload)

# Optimizations:

1. Assets related optimizations
    - Image related
        - Format: webP
        - srcset: images => srcset is a string which identifies one or more image candidate strings, 
                            separated using commas (,) each specifying image resources to use under given 
                            circumstances.
        - userAgent: ... => give user related info like which browser we are using, OS we are using etc.
        - dpr (device pixel ratio): ... => The devicePixelRatio of Window interface returns the ratio of 
                                           the resolution in physical pixels to the resolution in CSS pixels 
                                           for the current display device. 
        - Device/Internet connectivity: 2G/3G/4G => Optimize images according to this.
        - Prefetch images
        - Prefetch thumbnails till videos are loading

2. Feed optimizations
    - SSR (Above the fold - ATF) => The first load can be done on the server side so that we can load initial
                                    posts instantly, rest can be lazy loaded.
    - Lazy loading 
    - Infinite scroll
    - Virtualization
    - Intersection observable
    - Code splitting JS
    - Shimmer UI
    - Preserving feed scroll positions
    - Web workers for filters (Applying filters on images using a separate threads)
    - Optimistic updates => This helps in better UX, example: Youtube like system and instagram like system
                            use optimistic approach to show animation of like, when a user click on the like
                            button we simply run the animation of like success and parallely trigger the api 
                            call to like the concerned post, because we are optimistic about this api that 
                            it will give success status and will not fail, this kind of approach is 
                            considered as the optimistic approach, the opposite kind of approach is called 
                            as pessimist approach.

# Implementation approach:

1. Image editing
    - Crop / Resizing (Canvas API)
    - Filters (CSS filters)

2. Upload file
    - HTTP Post method (multipart/form data) => Here we are uploading entire data as a multipart, we take 
                                                everything as the POST data and upload them as multipart.
    - Base64 encoding => Convert the image to base64 and upload it to the server. When we want to show that
                         image we get that and decode it to normal format and render it.
    - Multi selection => Can restrict image formats and number of selections of images getting upload.
    - File chunking / Resumable uploads => Upload the big size files in chunks.