- What is HLD ?

HLD is a phase in the software development life cycle where the overall architecture and structure of a 
software system or application are planned and documented comprehensively.

It is an essential step that bridges the gap between the requirements specification and the actual 
implementation of the system. The goal of HLD is to provide a blueprint or roadmap for how the system 
will function and how its various components will interact.

- How to move forward step by step while creating an HLD of a system ?

- Step 1: Understand Requirements and Context:

Gather information:
Clearly define the app's purpose, key functionalities, target users, and any specific design constraints.

User Flows:
Map out the primary user journeys through the application, identifying critical interactions and navigation 
paths.

Feature Breakdown:
List down all features with their descriptions, including edge cases and potential user scenarios.

- Step 2: Bifurcate the requirements between functional and non-functional type.

Functional requirement: Given by the product managers, these are the kind of requirements need to make the 
app work.

Non-functional requirement: Designed according to the technical / architectural point of view, like security,
performance, device specificity, accessibility, responsiveness, SEO, offline support, caching etc.

- Step 3: Define Architecture and Technology Stack:

Framework Selection:
Choose a suitable JavaScript framework (React, Angular, Vue) based on project complexity, team expertise, 
and performance needs.

Component Structure:
Identify the major components of your application, considering reusability and modularity.

State Management:
Decide on a state management approach (built-in state management, Redux, MobX) to handle data flow across 
components.

Data Fetching:
Determine how data will be retrieved from backend APIs (RESTful, GraphQL).

- Step 4: Design User Interface (UI) Structure:

Wireframing:
Create low-fidelity wireframes to visualize the layout and hierarchy of screens, including navigation 
elements.

Visual Design:
Define color schemes, typography, and visual styling guidelines to ensure consistency across the application.

Component Library:
Plan reusable UI components (buttons, forms, cards) to maintain a unified look and feel.

- Step 5: Describe Key Components and Interactions:

Component Breakdown: Detail each component's purpose, functionality, and data requirements.

Data Binding: Explain how data will be passed between components and updated within the UI.

User Interactions: Define how users interact with components (e.g., click events, form submissions, 
data filtering).

- Step 6: Consider Performance and Scalability:

Optimization Strategies: Discuss techniques to optimize loading times, such as lazy loading, code splitting, 
and image optimization.

Accessibility: Outline plans to ensure the application is accessible to users with disabilities.

Responsive Design: Address how the app will adapt to different screen sizes and devices.

- Step 7: Documentation and Visualization:

Diagrams: Utilize visual aids like sitemaps, component diagrams, and state flowcharts to illustrate the 
overall structure and interactions.

Key Points to Include in your HLD:

1. App Overview: A brief description of the application, its goals, and target audience.

2. System Architecture: High-level overview of the frontend architecture, including chosen framework, 
state management approach, and data fetching mechanisms.

3. Component Hierarchy: Breakdown of major components and their relationships.

4. API Integration: How the frontend will communicate with backend APIs.

5. Navigation Flow: Description of user navigation within the application.

6. Technical Considerations: Potential challenges, performance optimization strategies, and accessibility 
considerations.

According to course:

1. Requirements analysis
2. System architecture
3. Module / Component
4. Data design/interfaces / API schema
5. Technology / Tech choices